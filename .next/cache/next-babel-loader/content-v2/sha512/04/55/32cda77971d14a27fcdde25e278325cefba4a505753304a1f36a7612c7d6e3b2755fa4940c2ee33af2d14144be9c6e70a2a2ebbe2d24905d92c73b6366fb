{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\Lazarev\\\\WebstormProjects\\\\Test task\\\\components\\\\comments\\\\Comments.tsx\";\nimport { useState, useCallback } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { StyledComments } from \"./Comments.styled\";\nimport { StyledButton } from \"../../styles/Button\";\nimport { getAllComments } from \"../api/api\";\nimport useHttp from \"../hooks/use-http\";\n\nconst Comments = () => {\n  const {\n    0: isAddingComment,\n    1: setIsAddingComment\n  } = useState(false);\n  const params = useParams();\n  const {\n    sendRequest,\n    status,\n    data: loadedComments\n  } = useHttp(getAllComments);\n  const {\n    postId\n  } = params;\n\n  const startAddCommentHandler = () => {\n    setIsAddingComment(true);\n  };\n\n  const addedCommentHandler = useCallback(() => {\n    sendRequest(postId);\n  }, [sendRequest, postId]);\n  return /*#__PURE__*/_jsxDEV(StyledComments, {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"User Comments\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 13\n    }, this), !isAddingComment && /*#__PURE__*/_jsxDEV(StyledButton, {\n      onClick: startAddCommentHandler,\n      children: \"Add a Comment\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 17\n    }, this), isAddingComment && /*#__PURE__*/_jsxDEV(NewCommentForm, {\n      quoteId: params.postId,\n      onAddedComment: addedCommentHandler\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 33\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 25,\n    columnNumber: 9\n  }, this);\n};\n\nexport default Comments;","map":{"version":3,"sources":["C:/Users/Lazarev/WebstormProjects/Test task/components/comments/Comments.tsx"],"names":["useState","useCallback","useParams","StyledComments","StyledButton","getAllComments","useHttp","Comments","isAddingComment","setIsAddingComment","params","sendRequest","status","data","loadedComments","postId","startAddCommentHandler","addedCommentHandler"],"mappings":";;AAAA,SAAQA,QAAR,EAAkBC,WAAlB,QAAoC,OAApC;AACA,SAAQC,SAAR,QAAwB,kBAAxB;AAEA,SAAQC,cAAR,QAA6B,mBAA7B;AACA,SAAQC,YAAR,QAA2B,qBAA3B;AACA,SAAQC,cAAR,QAA6B,YAA7B;AACA,OAAOC,OAAP,MAAoB,mBAApB;;AAEA,MAAMC,QAAQ,GAAG,MAAM;AACnB,QAAM;AAAA,OAACC,eAAD;AAAA,OAAkBC;AAAlB,MAAwCT,QAAQ,CAAC,KAAD,CAAtD;AACA,QAAMU,MAAM,GAAGR,SAAS,EAAxB;AACA,QAAM;AAACS,IAAAA,WAAD;AAAcC,IAAAA,MAAd;AAAsBC,IAAAA,IAAI,EAACC;AAA3B,MAA6CR,OAAO,CAACD,cAAD,CAA1D;AAEA,QAAM;AAACU,IAAAA;AAAD,MAAWL,MAAjB;;AAEA,QAAMM,sBAAsB,GAAG,MAAM;AACjCP,IAAAA,kBAAkB,CAAC,IAAD,CAAlB;AACH,GAFD;;AAIA,QAAMQ,mBAAmB,GAAGhB,WAAW,CAAC,MAAK;AACzCU,IAAAA,WAAW,CAACI,MAAD,CAAX;AACH,GAFsC,EAEpC,CAACJ,WAAD,EAAcI,MAAd,CAFoC,CAAvC;AAIA,sBACI,QAAC,cAAD;AAAA,4BACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,EAEK,CAACP,eAAD,iBACG,QAAC,YAAD;AAAc,MAAA,OAAO,EAAEQ,sBAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAHR,EAOKR,eAAe,iBAAI,QAAC,cAAD;AAAgB,MAAA,OAAO,EAAEE,MAAM,CAACK,MAAhC;AAAwC,MAAA,cAAc,EAAEE;AAAxD;AAAA;AAAA;AAAA;AAAA,YAPxB;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAYH,CA3BD;;AA6BA,eAAeV,QAAf","sourcesContent":["import {useState, useCallback} from \"react\";\r\nimport {useParams} from \"react-router-dom\";\r\n\r\nimport {StyledComments} from \"./Comments.styled\";\r\nimport {StyledButton} from \"../../styles/Button\";\r\nimport {getAllComments} from \"../api/api\";\r\nimport useHttp from \"../hooks/use-http\";\r\n\r\nconst Comments = () => {\r\n    const [isAddingComment, setIsAddingComment] = useState(false);\r\n    const params = useParams();\r\n    const {sendRequest, status, data:loadedComments} = useHttp(getAllComments);\r\n\r\n    const {postId} = params;\r\n\r\n    const startAddCommentHandler = () => {\r\n        setIsAddingComment(true);\r\n    };\r\n\r\n    const addedCommentHandler = useCallback(()=> {\r\n        sendRequest(postId);\r\n    }, [sendRequest, postId]);\r\n\r\n    return (\r\n        <StyledComments >\r\n            <h2>User Comments</h2>\r\n            {!isAddingComment && (\r\n                <StyledButton onClick={startAddCommentHandler}>\r\n                    Add a Comment\r\n                </StyledButton>\r\n            )}\r\n            {isAddingComment && <NewCommentForm quoteId={params.postId} onAddedComment={addedCommentHandler}/>}\r\n\r\n        </StyledComments>\r\n    );\r\n}\r\n\r\nexport default Comments;"]},"metadata":{},"sourceType":"module"}