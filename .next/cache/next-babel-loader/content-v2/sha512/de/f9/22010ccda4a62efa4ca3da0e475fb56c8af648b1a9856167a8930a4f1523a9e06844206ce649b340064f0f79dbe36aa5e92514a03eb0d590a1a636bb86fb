{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\Lazarev\\\\WebstormProjects\\\\Test task\\\\components\\\\posts\\\\PostList.tsx\",\n    _this = this;\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nimport { Fragment } from \"react\";\nimport PostItem from \"./PostItem\";\n\nvar PostList = function PostList(props) {\n  var loadedPosts = props.posts;\n\n  var _iterator = _createForOfIteratorHelper(loadedPosts),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var key = _step.value;\n      console.log(key[key]);\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n\n  var posts = [{\n    id: 'p1',\n    text: 'hello',\n    author: \"World\"\n  }];\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: posts.map(function (post) {\n        return /*#__PURE__*/_jsxDEV(PostItem, {\n          id: post.id,\n          author: post.author,\n          text: post.text\n        }, post.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 24,\n          columnNumber: 21\n        }, _this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 13\n    }, _this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 21,\n    columnNumber: 9\n  }, _this);\n};\n\n_c = PostList;\nexport default PostList;\n\nvar _c;\n\n$RefreshReg$(_c, \"PostList\");","map":{"version":3,"sources":["C:/Users/Lazarev/WebstormProjects/Test task/components/posts/PostList.tsx"],"names":["Fragment","PostItem","PostList","props","loadedPosts","posts","key","console","log","id","text","author","map","post"],"mappings":";;;;;;;;;;;AAAA,SAAQA,QAAR,QAAuB,OAAvB;AAEA,OAAOC,QAAP,MAAqB,YAArB;;AAEA,IAAMC,QAAQ,GAAG,SAAXA,QAAW,CAACC,KAAD,EAAW;AACxB,MAAMC,WAAW,GAAGD,KAAK,CAACE,KAA1B;;AADwB,6CAGND,WAHM;AAAA;;AAAA;AAGxB,wDAA8B;AAAA,UAAnBE,GAAmB;AAC1BC,MAAAA,OAAO,CAACC,GAAR,CAAYF,GAAG,CAACA,GAAD,CAAf;AACH;AALuB;AAAA;AAAA;AAAA;AAAA;;AAOxB,MAAMD,KAAK,GAAG,CACV;AACII,IAAAA,EAAE,EAAE,IADR;AAEIC,IAAAA,IAAI,EAAE,OAFV;AAGIC,IAAAA,MAAM,EAAE;AAHZ,GADU,CAAd;AAQA,sBACI,QAAC,QAAD;AAAA,2BACI;AAAA,gBACKN,KAAK,CAACO,GAAN,CAAU,UAACC,IAAD;AAAA,4BACP,QAAC,QAAD;AAEI,UAAA,EAAE,EAAEA,IAAI,CAACJ,EAFb;AAGI,UAAA,MAAM,EAAEI,IAAI,CAACF,MAHjB;AAII,UAAA,IAAI,EAAEE,IAAI,CAACH;AAJf,WACSG,IAAI,CAACJ,EADd;AAAA;AAAA;AAAA;AAAA,iBADO;AAAA,OAAV;AADL;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,WADJ;AAcH,CA7BD;;KAAMP,Q;AA+BN,eAAeA,QAAf","sourcesContent":["import {Fragment} from \"react\";\r\n\r\nimport PostItem from \"./PostItem\";\r\n\r\nconst PostList = (props) => {\r\n    const loadedPosts = props.posts;\r\n\r\n    for (const key of loadedPosts){\r\n        console.log(key[key])\r\n    }\r\n\r\n    const posts = [\r\n        {\r\n            id: 'p1',\r\n            text: 'hello',\r\n            author: \"World\"\r\n        }\r\n    ]\r\n\r\n    return (\r\n        <Fragment>\r\n            <ul>\r\n                {posts.map((post) => (\r\n                    <PostItem\r\n                        key={post.id}\r\n                        id={post.id}\r\n                        author={post.author}\r\n                        text={post.text}\r\n                    />\r\n                ))}\r\n            </ul>\r\n        </Fragment>\r\n    );\r\n}\r\n\r\nexport default PostList;"]},"metadata":{},"sourceType":"module"}