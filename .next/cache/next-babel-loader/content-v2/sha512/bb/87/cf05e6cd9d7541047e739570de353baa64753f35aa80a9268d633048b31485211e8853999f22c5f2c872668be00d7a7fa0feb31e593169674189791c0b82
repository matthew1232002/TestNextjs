{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nconst FIREBASE_DOMAIN = 'https://react-2faef-default-rtdb.firebaseio.com/';\nexport async function getAllPosts() {\n  const response = await fetch(`${FIREBASE_DOMAIN}/posts.json`);\n  const data = await response.json();\n  const transformedQuotes = [];\n\n  for (const key in data) {\n    const quoteObj = _objectSpread({\n      id: key\n    }, data[key]);\n\n    transformedQuotes.push(quoteObj);\n  }\n\n  return transformedQuotes;\n}\nexport async function getSinglePost(postId) {\n  const response = await fetch(`${FIREBASE_DOMAIN}/posts/${postId}.json`);\n  const data = await response.json();\n\n  const loadedQuote = _objectSpread({\n    id: postId\n  }, data);\n\n  return loadedQuote;\n}\nexport async function addQuote(quoteData) {\n  await fetch(`${FIREBASE_DOMAIN}/posts.json`, {\n    method: 'POST',\n    body: JSON.stringify(quoteData),\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  });\n  return null;\n}\nexport async function addComment(requestData) {\n  const response = await fetch(`${FIREBASE_DOMAIN}/comments/${requestData.postId}.json`, {\n    method: 'POST',\n    body: JSON.stringify(requestData.commentData),\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  });\n  const data = await response.json();\n  return {\n    commentId: data.id\n  };\n}\nexport async function getAllComments(postId) {\n  const response = await fetch(`${FIREBASE_DOMAIN}/comments/${postId}.json`);\n  const data = await response.json();\n  const transformedComments = [];\n\n  for (const key in data) {\n    const commentObj = _objectSpread({\n      id: key\n    }, data[key]);\n\n    transformedComments.push(commentObj);\n  }\n\n  return transformedComments;\n}","map":null,"metadata":{},"sourceType":"module"}