{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nconst FIREBASE_DOMAIN = 'https://react-2faef-default-rtdb.firebaseio.com/';\nexport async function getAllPosts() {\n  const response = await fetch(`${FIREBASE_DOMAIN}/posts.json`);\n  const data = await response.json();\n  const transformedQuotes = [];\n\n  for (const key in data) {\n    const quoteObj = _objectSpread({\n      id: key\n    }, data[key]);\n\n    transformedQuotes.push(quoteObj);\n  }\n\n  return transformedQuotes;\n}\nexport async function getSinglePost(postId) {\n  const response = await fetch(`${FIREBASE_DOMAIN}/posts/${postId}.json`);\n  const data = await response.json();\n\n  const loadedQuote = _objectSpread({\n    id: postId\n  }, data);\n\n  return loadedQuote;\n}\nexport async function addQuote(quoteData) {\n  await fetch(`${FIREBASE_DOMAIN}/posts.json`, {\n    method: 'POST',\n    body: JSON.stringify(quoteData),\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  });\n  return null;\n}\nexport async function addComment(requestData) {\n  const response = await fetch(`${FIREBASE_DOMAIN}/comments/${requestData.postId}.json`, {\n    method: 'POST',\n    body: JSON.stringify(requestData.commentData),\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  });\n  const data = await response.json();\n  return {\n    commentId: data.id\n  };\n}\nexport async function getAllComments(postId) {\n  const response = await fetch(`${FIREBASE_DOMAIN}/comments/${postId}.json`);\n  const data = await response.json();\n  const transformedComments = [];\n\n  for (const key in data) {\n    const commentObj = _objectSpread({\n      id: key\n    }, data[key]);\n\n    transformedComments.push(commentObj);\n  }\n\n  return transformedComments;\n}","map":{"version":3,"sources":["C:/Users/Lazarev/WebstormProjects/Test task/components/api/api.ts"],"names":["FIREBASE_DOMAIN","getAllPosts","response","fetch","data","json","transformedQuotes","key","quoteObj","id","push","getSinglePost","postId","loadedQuote","addQuote","quoteData","method","body","JSON","stringify","headers","addComment","requestData","commentData","commentId","getAllComments","transformedComments","commentObj"],"mappings":";;;;;;AAGA,MAAMA,eAAe,GAAG,kDAAxB;AAEA,OAAO,eAAeC,WAAf,GAA6B;AAChC,QAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAEH,eAAgB,aAApB,CAA5B;AACA,QAAMI,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAT,EAAnB;AAEA,QAAMC,iBAAiB,GAAG,EAA1B;;AAEA,OAAK,MAAMC,GAAX,IAAkBH,IAAlB,EAAwB;AACpB,UAAMI,QAAQ;AACVC,MAAAA,EAAE,EAAEF;AADM,OAEPH,IAAI,CAACG,GAAD,CAFG,CAAd;;AAKAD,IAAAA,iBAAiB,CAACI,IAAlB,CAAuBF,QAAvB;AACH;;AAED,SAAOF,iBAAP;AACH;AAED,OAAO,eAAeK,aAAf,CAA6BC,MAA7B,EAAqC;AACxC,QAAMV,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAEH,eAAgB,UAASY,MAAO,OAApC,CAA5B;AACA,QAAMR,IAAc,GAAG,MAAMF,QAAQ,CAACG,IAAT,EAA7B;;AAEA,QAAMQ,WAAW;AACbJ,IAAAA,EAAE,EAAEG;AADS,KAEVR,IAFU,CAAjB;;AAKA,SAAOS,WAAP;AACH;AAED,OAAO,eAAeC,QAAf,CAAwBC,SAAxB,EAAmC;AACtC,QAAMZ,KAAK,CAAE,GAAEH,eAAgB,aAApB,EAAkC;AACzCgB,IAAAA,MAAM,EAAE,MADiC;AAEzCC,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeJ,SAAf,CAFmC;AAGzCK,IAAAA,OAAO,EAAE;AACL,sBAAgB;AADX;AAHgC,GAAlC,CAAX;AAQA,SAAO,IAAP;AACH;AAED,OAAO,eAAeC,UAAf,CAA0BC,WAA1B,EAAuC;AAC1C,QAAMpB,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAEH,eAAgB,aAAYsB,WAAW,CAACV,MAAO,OAAnD,EAA2D;AACnFI,IAAAA,MAAM,EAAE,MAD2E;AAEnFC,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeG,WAAW,CAACC,WAA3B,CAF6E;AAGnFH,IAAAA,OAAO,EAAE;AACL,sBAAgB;AADX;AAH0E,GAA3D,CAA5B;AAOA,QAAMhB,IAAkB,GAAG,MAAMF,QAAQ,CAACG,IAAT,EAAjC;AAGA,SAAO;AAACmB,IAAAA,SAAS,EAAEpB,IAAI,CAACK;AAAjB,GAAP;AACH;AAED,OAAO,eAAegB,cAAf,CAA8Bb,MAA9B,EAA8C;AACjD,QAAMV,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAEH,eAAgB,aAAYY,MAAO,OAAvC,CAA5B;AAEA,QAAMR,IAAoB,GAAG,MAAMF,QAAQ,CAACG,IAAT,EAAnC;AAEA,QAAMqB,mBAAmB,GAAG,EAA5B;;AAEA,OAAK,MAAMnB,GAAX,IAAkBH,IAAlB,EAAwB;AACpB,UAAMuB,UAAU;AACZlB,MAAAA,EAAE,EAAEF;AADQ,OAETH,IAAI,CAACG,GAAD,CAFK,CAAhB;;AAKAmB,IAAAA,mBAAmB,CAAChB,IAApB,CAAyBiB,UAAzB;AACH;;AAED,SAAOD,mBAAP;AACH","sourcesContent":["import {PostModel} from \"../../models/Post.model\";\r\nimport {CommentModel} from \"../../models/Comment.model\";\r\n\r\nconst FIREBASE_DOMAIN = 'https://react-2faef-default-rtdb.firebaseio.com/';\r\n\r\nexport async function getAllPosts() {\r\n    const response = await fetch(`${FIREBASE_DOMAIN}/posts.json`);\r\n    const data = await response.json();\r\n\r\n    const transformedQuotes = [];\r\n\r\n    for (const key in data) {\r\n        const quoteObj = {\r\n            id: key,\r\n            ...data[key],\r\n        };\r\n\r\n        transformedQuotes.push(quoteObj);\r\n    }\r\n\r\n    return transformedQuotes;\r\n}\r\n\r\nexport async function getSinglePost(postId) {\r\n    const response = await fetch(`${FIREBASE_DOMAIN}/posts/${postId}.json`);\r\n    const data:PostModel = await response.json();\r\n\r\n    const loadedQuote = {\r\n        id: postId,\r\n        ...data\r\n    };\r\n\r\n    return loadedQuote;\r\n}\r\n\r\nexport async function addQuote(quoteData) {\r\n    await fetch(`${FIREBASE_DOMAIN}/posts.json`, {\r\n        method: 'POST',\r\n        body: JSON.stringify(quoteData),\r\n        headers: {\r\n            'Content-Type': 'application/json',\r\n        },\r\n    });\r\n\r\n    return null;\r\n}\r\n\r\nexport async function addComment(requestData) {\r\n    const response = await fetch(`${FIREBASE_DOMAIN}/comments/${requestData.postId}.json`, {\r\n        method: 'POST',\r\n        body: JSON.stringify(requestData.commentData),\r\n        headers: {\r\n            'Content-Type': 'application/json',\r\n        },\r\n    });\r\n    const data: CommentModel = await response.json();\r\n\r\n\r\n    return {commentId: data.id};\r\n}\r\n\r\nexport async function getAllComments(postId: string) {\r\n    const response = await fetch(`${FIREBASE_DOMAIN}/comments/${postId}.json`);\r\n\r\n    const data: CommentModel[] = await response.json();\r\n\r\n    const transformedComments = [];\r\n\r\n    for (const key in data) {\r\n        const commentObj = {\r\n            id: key,\r\n            ...data[key],\r\n        };\r\n\r\n        transformedComments.push(commentObj);\r\n    }\r\n\r\n    return transformedComments;\r\n}\r\n"]},"metadata":{},"sourceType":"module"}