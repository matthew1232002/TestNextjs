{"ast":null,"code":"import _regeneratorRuntime from \"C:/Users/Lazarev/WebstormProjects/Test task/node_modules/@babel/runtime/regenerator\";\nimport _defineProperty from \"C:/Users/Lazarev/WebstormProjects/Test task/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _asyncToGenerator from \"C:/Users/Lazarev/WebstormProjects/Test task/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nvar FIREBASE_DOMAIN = 'https://react-2faef-default-rtdb.firebaseio.com/';\nexport function getAllQuotes() {\n  return _getAllQuotes.apply(this, arguments);\n}\n\nfunction _getAllQuotes() {\n  _getAllQuotes = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n    var response, data, transformedQuotes, key, quoteObj;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return fetch(\"\".concat(FIREBASE_DOMAIN, \"/quotes.json\"));\n\n          case 2:\n            response = _context.sent;\n            _context.next = 5;\n            return response.json();\n\n          case 5:\n            data = _context.sent;\n\n            if (response.ok) {\n              _context.next = 8;\n              break;\n            }\n\n            throw new Error(data.message || 'Could not fetch quotes.');\n\n          case 8:\n            transformedQuotes = [];\n\n            for (key in data) {\n              quoteObj = _objectSpread({\n                id: key\n              }, data[key]);\n              transformedQuotes.push(quoteObj);\n            }\n\n            return _context.abrupt(\"return\", transformedQuotes);\n\n          case 11:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _getAllQuotes.apply(this, arguments);\n}\n\nexport function getSingleQuote(_x) {\n  return _getSingleQuote.apply(this, arguments);\n}\n\nfunction _getSingleQuote() {\n  _getSingleQuote = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(postId) {\n    var response, data, loadedQuote;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return fetch(\"\".concat(FIREBASE_DOMAIN, \"/quotes/\").concat(postId, \".json\"));\n\n          case 2:\n            response = _context2.sent;\n            _context2.next = 5;\n            return response.json();\n\n          case 5:\n            data = _context2.sent;\n\n            if (response.ok) {\n              _context2.next = 8;\n              break;\n            }\n\n            throw new Error(data.message || 'Could not fetch quote.');\n\n          case 8:\n            loadedQuote = _objectSpread({\n              id: postId\n            }, data);\n            return _context2.abrupt(\"return\", loadedQuote);\n\n          case 10:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n  return _getSingleQuote.apply(this, arguments);\n}\n\nexport function addQuote(_x2) {\n  return _addQuote.apply(this, arguments);\n}\n\nfunction _addQuote() {\n  _addQuote = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(quoteData) {\n    var response, data;\n    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            _context3.next = 2;\n            return fetch(\"\".concat(FIREBASE_DOMAIN, \"/quotes.json\"), {\n              method: 'POST',\n              body: JSON.stringify(quoteData),\n              headers: {\n                'Content-Type': 'application/json'\n              }\n            });\n\n          case 2:\n            response = _context3.sent;\n            _context3.next = 5;\n            return response.json();\n\n          case 5:\n            data = _context3.sent;\n\n            if (response.ok) {\n              _context3.next = 8;\n              break;\n            }\n\n            throw new Error(data.message || 'Could not create quote.');\n\n          case 8:\n            return _context3.abrupt(\"return\", null);\n\n          case 9:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3);\n  }));\n  return _addQuote.apply(this, arguments);\n}\n\nexport function addComment(_x3) {\n  return _addComment.apply(this, arguments);\n}\n\nfunction _addComment() {\n  _addComment = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(requestData) {\n    var response, data;\n    return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            _context4.next = 2;\n            return fetch(\"\".concat(FIREBASE_DOMAIN, \"/comments/\").concat(requestData.postId, \".json\"), {\n              method: 'POST',\n              body: JSON.stringify(requestData.commentData),\n              headers: {\n                'Content-Type': 'application/json'\n              }\n            });\n\n          case 2:\n            response = _context4.sent;\n            _context4.next = 5;\n            return response.json();\n\n          case 5:\n            data = _context4.sent;\n\n            if (response.ok) {\n              _context4.next = 8;\n              break;\n            }\n\n            throw new Error(data.message || 'Could not add comment.');\n\n          case 8:\n            return _context4.abrupt(\"return\", {\n              commentId: data.name\n            });\n\n          case 9:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, _callee4);\n  }));\n  return _addComment.apply(this, arguments);\n}\n\nexport function getAllComments(_x4) {\n  return _getAllComments.apply(this, arguments);\n}\n\nfunction _getAllComments() {\n  _getAllComments = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(postId) {\n    var response, data, transformedComments, key, commentObj;\n    return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n      while (1) {\n        switch (_context5.prev = _context5.next) {\n          case 0:\n            _context5.next = 2;\n            return fetch(\"\".concat(FIREBASE_DOMAIN, \"/comments/\").concat(postId, \".json\"));\n\n          case 2:\n            response = _context5.sent;\n            _context5.next = 5;\n            return response.json();\n\n          case 5:\n            data = _context5.sent;\n\n            if (response.ok) {\n              _context5.next = 8;\n              break;\n            }\n\n            throw new Error(data.message || 'Could not get comments.');\n\n          case 8:\n            transformedComments = [];\n\n            for (key in data) {\n              commentObj = _objectSpread({\n                id: key\n              }, data[key]);\n              transformedComments.push(commentObj);\n            }\n\n            return _context5.abrupt(\"return\", transformedComments);\n\n          case 11:\n          case \"end\":\n            return _context5.stop();\n        }\n      }\n    }, _callee5);\n  }));\n  return _getAllComments.apply(this, arguments);\n}","map":{"version":3,"sources":["C:/Users/Lazarev/WebstormProjects/Test task/components/api/api.ts"],"names":["FIREBASE_DOMAIN","getAllQuotes","fetch","response","json","data","ok","Error","message","transformedQuotes","key","quoteObj","id","push","getSingleQuote","postId","loadedQuote","addQuote","quoteData","method","body","JSON","stringify","headers","addComment","requestData","commentData","commentId","name","getAllComments","transformedComments","commentObj"],"mappings":"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","sourcesContent":["const FIREBASE_DOMAIN = 'https://react-2faef-default-rtdb.firebaseio.com/';\r\n\r\nexport async function getAllQuotes() {\r\n    const response = await fetch(`${FIREBASE_DOMAIN}/quotes.json`);\r\n    const data = await response.json();\r\n\r\n    if (!response.ok) {\r\n        throw new Error(data.message || 'Could not fetch quotes.');\r\n    }\r\n\r\n    const transformedQuotes = [];\r\n\r\n    for (const key in data) {\r\n        const quoteObj = {\r\n            id: key,\r\n            ...data[key],\r\n        };\r\n\r\n        transformedQuotes.push(quoteObj);\r\n    }\r\n\r\n    return transformedQuotes;\r\n}\r\n\r\nexport async function getSingleQuote(postId) {\r\n    const response = await fetch(`${FIREBASE_DOMAIN}/quotes/${postId}.json`);\r\n    const data = await response.json();\r\n\r\n    if (!response.ok) {\r\n        throw new Error(data.message || 'Could not fetch quote.');\r\n    }\r\n\r\n    const loadedQuote = {\r\n        id: postId,\r\n        ...data,\r\n    };\r\n\r\n    return loadedQuote;\r\n}\r\n\r\nexport async function addQuote(quoteData) {\r\n    const response = await fetch(`${FIREBASE_DOMAIN}/quotes.json`, {\r\n        method: 'POST',\r\n        body: JSON.stringify(quoteData),\r\n        headers: {\r\n            'Content-Type': 'application/json',\r\n        },\r\n    });\r\n    const data = await response.json();\r\n\r\n    if (!response.ok) {\r\n        throw new Error(data.message || 'Could not create quote.');\r\n    }\r\n\r\n    return null;\r\n}\r\n\r\nexport async function addComment(requestData) {\r\n    const response = await fetch(`${FIREBASE_DOMAIN}/comments/${requestData.postId}.json`, {\r\n        method: 'POST',\r\n        body: JSON.stringify(requestData.commentData),\r\n        headers: {\r\n            'Content-Type': 'application/json',\r\n        },\r\n    });\r\n    const data = await response.json();\r\n\r\n    if (!response.ok) {\r\n        throw new Error(data.message || 'Could not add comment.');\r\n    }\r\n\r\n    return { commentId: data.name };\r\n}\r\n\r\nexport async function getAllComments(postId) {\r\n    const response = await fetch(`${FIREBASE_DOMAIN}/comments/${postId}.json`);\r\n\r\n    const data = await response.json();\r\n\r\n    if (!response.ok) {\r\n        throw new Error(data.message || 'Could not get comments.');\r\n    }\r\n\r\n    const transformedComments = [];\r\n\r\n    for (const key in data) {\r\n        const commentObj = {\r\n            id: key,\r\n            ...data[key],\r\n        };\r\n\r\n        transformedComments.push(commentObj);\r\n    }\r\n\r\n    return transformedComments;\r\n}\r\n"]},"metadata":{},"sourceType":"module"}