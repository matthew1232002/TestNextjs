{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nconst FIREBASE_DOMAIN = 'https://react-2faef-default-rtdb.firebaseio.com/';\nexport async function getAllQuotes() {\n  const response = await fetch(`${FIREBASE_DOMAIN}/posts.json`);\n  const data = await response.json();\n\n  if (!response.ok) {\n    throw new Error(data.message || 'Could not fetch quotes.');\n  }\n\n  const transformedQuotes = [];\n\n  for (const key in data) {\n    const quoteObj = _objectSpread({\n      id: key\n    }, data[key]);\n\n    transformedQuotes.push(quoteObj);\n  }\n\n  return transformedQuotes;\n}\nexport async function getSingleQuote(postId) {\n  const response = await fetch(`${FIREBASE_DOMAIN}/posts/${postId}.json`);\n  const data = await response.json();\n\n  if (!response.ok) {\n    throw new Error(data.message || 'Could not fetch quote.');\n  }\n\n  const loadedQuote = _objectSpread({\n    id: postId\n  }, data);\n\n  return loadedQuote;\n}\nexport async function addQuote(quoteData) {\n  await fetch(`${FIREBASE_DOMAIN}/posts.json`, {\n    method: 'POST',\n    body: JSON.stringify(quoteData),\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  });\n  return null;\n}\nexport async function addComment(requestData) {\n  const response = await fetch(`${FIREBASE_DOMAIN}/comments/${requestData.postId}.json`, {\n    method: 'POST',\n    body: JSON.stringify(requestData.commentData),\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  });\n  const data = await response.json();\n  console.log(data.name);\n  return {\n    commentId: data.name\n  };\n}\nexport async function getAllComments(postId) {\n  const response = await fetch(`${FIREBASE_DOMAIN}/comments/${postId}.json`);\n  const data = await response.json();\n\n  if (!response.ok) {\n    throw new Error(data.message || 'Could not get comments.');\n  }\n\n  const transformedComments = [];\n\n  for (const key in data) {\n    const commentObj = _objectSpread({\n      id: key\n    }, data[key]);\n\n    transformedComments.push(commentObj);\n  }\n\n  return transformedComments;\n}","map":{"version":3,"sources":["C:/Users/Lazarev/WebstormProjects/Test task/components/api/api.ts"],"names":["FIREBASE_DOMAIN","getAllQuotes","response","fetch","data","json","ok","Error","message","transformedQuotes","key","quoteObj","id","push","getSingleQuote","postId","loadedQuote","addQuote","quoteData","method","body","JSON","stringify","headers","addComment","requestData","commentData","console","log","name","commentId","getAllComments","transformedComments","commentObj"],"mappings":"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","sourcesContent":["const FIREBASE_DOMAIN = 'https://react-2faef-default-rtdb.firebaseio.com/';\r\n\r\nexport async function getAllQuotes() {\r\n    const response = await fetch(`${FIREBASE_DOMAIN}/posts.json`);\r\n    const data = await response.json();\r\n\r\n    if (!response.ok) {\r\n        throw new Error(data.message || 'Could not fetch quotes.');\r\n    }\r\n\r\n    const transformedQuotes = [];\r\n\r\n    for (const key in data) {\r\n        const quoteObj = {\r\n            id: key,\r\n            ...data[key],\r\n        };\r\n\r\n        transformedQuotes.push(quoteObj);\r\n    }\r\n\r\n    return transformedQuotes;\r\n}\r\n\r\nexport async function getSingleQuote(postId) {\r\n    const response = await fetch(`${FIREBASE_DOMAIN}/posts/${postId}.json`);\r\n    const data = await response.json();\r\n\r\n    if (!response.ok) {\r\n        throw new Error(data.message || 'Could not fetch quote.');\r\n    }\r\n\r\n    const loadedQuote = {\r\n        id: postId,\r\n        ...data\r\n    };\r\n\r\n    return loadedQuote;\r\n}\r\n\r\nexport async function addQuote(quoteData) {\r\n    await fetch(`${FIREBASE_DOMAIN}/posts.json`, {\r\n        method: 'POST',\r\n        body: JSON.stringify(quoteData),\r\n        headers: {\r\n            'Content-Type': 'application/json',\r\n        },\r\n    });\r\n\r\n    return null;\r\n}\r\n\r\nexport async function addComment(requestData) {\r\n    const response = await fetch(`${FIREBASE_DOMAIN}/comments/${requestData.postId}.json`, {\r\n        method: 'POST',\r\n        body: JSON.stringify(requestData.commentData),\r\n        headers: {\r\n            'Content-Type': 'application/json',\r\n        },\r\n    });\r\n    const data = await response.json();\r\n\r\n    console.log(data.name)\r\n\r\n    return { commentId: data.name };\r\n}\r\n\r\nexport async function getAllComments(postId) {\r\n    const response = await fetch(`${FIREBASE_DOMAIN}/comments/${postId}.json`);\r\n\r\n    const data = await response.json();\r\n\r\n    if (!response.ok) {\r\n        throw new Error(data.message || 'Could not get comments.');\r\n    }\r\n\r\n    const transformedComments = [];\r\n\r\n    for (const key in data) {\r\n        const commentObj = {\r\n            id: key,\r\n            ...data[key],\r\n        };\r\n\r\n        transformedComments.push(commentObj);\r\n    }\r\n\r\n    return transformedComments;\r\n}\r\n"]},"metadata":{},"sourceType":"module"}