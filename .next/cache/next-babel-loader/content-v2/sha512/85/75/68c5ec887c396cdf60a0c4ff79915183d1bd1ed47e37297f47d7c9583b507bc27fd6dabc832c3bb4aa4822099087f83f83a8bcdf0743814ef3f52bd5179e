{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { useReducer, useCallback } from \"react\";\n\nfunction httpReducer(state, action) {\n  if (action.type === 'SEND') {\n    return {\n      data: null,\n      error: null,\n      status: 'pending'\n    };\n  }\n\n  if (action.type === 'SUCCESS') {\n    return {\n      data: action.responseData,\n      error: null,\n      status: 'completed'\n    };\n  } // if (action.type === 'ERROR') {\n  //     return {\n  //         data: null,\n  //         error: action.errorMessage,\n  //         status: 'completed',\n  //     };\n  // }\n\n\n  return state;\n}\n\nfunction useHttp(requestFunction, startWithPending = false) {\n  const {\n    0: httpState,\n    1: dispatch\n  } = useReducer(httpReducer, {\n    status: startWithPending ? 'pending' : null,\n    data: null,\n    error: null\n  });\n  const sendRequest = useCallback(async function (requestData) {\n    dispatch({\n      type: 'SEND'\n    });\n\n    try {\n      const responseData = await requestFunction(requestData);\n      dispatch({\n        type: 'SUCCESS',\n        responseData\n      });\n    } catch (error) {// dispatch({\n      //     type: 'ERROR',\n      //     errorMessage: error.message || 'Something went wrong!',\n      // });\n    }\n  }, [requestFunction]);\n  return _objectSpread({\n    sendRequest\n  }, httpState);\n}\n\nexport default useHttp;","map":{"version":3,"sources":["C:/Users/Lazarev/WebstormProjects/Test task/components/hooks/use-http.ts"],"names":["useReducer","useCallback","httpReducer","state","action","type","data","error","status","responseData","useHttp","requestFunction","startWithPending","httpState","dispatch","sendRequest","requestData"],"mappings":";;;;;;AAAA,SAAQA,UAAR,EAAoBC,WAApB,QAAsC,OAAtC;;AAEA,SAASC,WAAT,CAAqBC,KAArB,EAA4BC,MAA5B,EAAoC;AAChC,MAAIA,MAAM,CAACC,IAAP,KAAgB,MAApB,EAA4B;AACxB,WAAO;AACHC,MAAAA,IAAI,EAAE,IADH;AAEHC,MAAAA,KAAK,EAAE,IAFJ;AAGHC,MAAAA,MAAM,EAAE;AAHL,KAAP;AAKH;;AAED,MAAIJ,MAAM,CAACC,IAAP,KAAgB,SAApB,EAA+B;AAC3B,WAAO;AACHC,MAAAA,IAAI,EAAEF,MAAM,CAACK,YADV;AAEHF,MAAAA,KAAK,EAAE,IAFJ;AAGHC,MAAAA,MAAM,EAAE;AAHL,KAAP;AAKH,GAf+B,CAiBhC;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,SAAOL,KAAP;AACH;;AAED,SAASO,OAAT,CAAiBC,eAAjB,EAAkCC,gBAAgB,GAAG,KAArD,EAA4D;AACxD,QAAM;AAAA,OAACC,SAAD;AAAA,OAAYC;AAAZ,MAAwBd,UAAU,CAACE,WAAD,EAAc;AAClDM,IAAAA,MAAM,EAAEI,gBAAgB,GAAG,SAAH,GAAe,IADW;AAElDN,IAAAA,IAAI,EAAE,IAF4C;AAGlDC,IAAAA,KAAK,EAAE;AAH2C,GAAd,CAAxC;AAMA,QAAMQ,WAAW,GAAGd,WAAW,CAC3B,gBAAgBe,WAAhB,EAA6B;AACzBF,IAAAA,QAAQ,CAAC;AAAET,MAAAA,IAAI,EAAE;AAAR,KAAD,CAAR;;AACA,QAAI;AACA,YAAMI,YAAY,GAAG,MAAME,eAAe,CAACK,WAAD,CAA1C;AACAF,MAAAA,QAAQ,CAAC;AAAET,QAAAA,IAAI,EAAE,SAAR;AAAmBI,QAAAA;AAAnB,OAAD,CAAR;AACH,KAHD,CAGE,OAAOF,KAAP,EAAc,CACZ;AACA;AACA;AACA;AACH;AACJ,GAZ0B,EAa3B,CAACI,eAAD,CAb2B,CAA/B;AAgBA;AACII,IAAAA;AADJ,KAEOF,SAFP;AAIH;;AAED,eAAeH,OAAf","sourcesContent":["import {useReducer, useCallback} from \"react\";\r\n\r\nfunction httpReducer(state, action) {\r\n    if (action.type === 'SEND') {\r\n        return {\r\n            data: null,\r\n            error: null,\r\n            status: 'pending',\r\n        };\r\n    }\r\n\r\n    if (action.type === 'SUCCESS') {\r\n        return {\r\n            data: action.responseData,\r\n            error: null,\r\n            status: 'completed',\r\n        };\r\n    }\r\n\r\n    // if (action.type === 'ERROR') {\r\n    //     return {\r\n    //         data: null,\r\n    //         error: action.errorMessage,\r\n    //         status: 'completed',\r\n    //     };\r\n    // }\r\n\r\n    return state;\r\n}\r\n\r\nfunction useHttp(requestFunction, startWithPending = false) {\r\n    const [httpState, dispatch] = useReducer(httpReducer, {\r\n        status: startWithPending ? 'pending' : null,\r\n        data: null,\r\n        error: null,\r\n    });\r\n\r\n    const sendRequest = useCallback(\r\n        async function (requestData) {\r\n            dispatch({ type: 'SEND' });\r\n            try {\r\n                const responseData = await requestFunction(requestData);\r\n                dispatch({ type: 'SUCCESS', responseData });\r\n            } catch (error) {\r\n                // dispatch({\r\n                //     type: 'ERROR',\r\n                //     errorMessage: error.message || 'Something went wrong!',\r\n                // });\r\n            }\r\n        },\r\n        [requestFunction]\r\n    );\r\n\r\n    return {\r\n        sendRequest,\r\n        ...httpState,\r\n    };\r\n}\r\n\r\nexport default useHttp;\r\n"]},"metadata":{},"sourceType":"module"}